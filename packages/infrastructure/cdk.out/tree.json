{"version":"tree-0.1","tree":{"id":"App","path":"","constructInfo":{"fqn":"aws-cdk-lib.App","version":"2.212.0"},"children":{"SolanalysisLightsail-prod":{"id":"SolanalysisLightsail-prod","path":"SolanalysisLightsail-prod","constructInfo":{"fqn":"aws-cdk-lib.Stack","version":"2.212.0"},"children":{"LightsailRole":{"id":"LightsailRole","path":"SolanalysisLightsail-prod/LightsailRole","constructInfo":{"fqn":"aws-cdk-lib.aws_iam.Role","version":"2.212.0","metadata":[]},"children":{"ImportLightsailRole":{"id":"ImportLightsailRole","path":"SolanalysisLightsail-prod/LightsailRole/ImportLightsailRole","constructInfo":{"fqn":"aws-cdk-lib.Resource","version":"2.212.0","metadata":[]}},"Resource":{"id":"Resource","path":"SolanalysisLightsail-prod/LightsailRole/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_iam.CfnRole","version":"2.212.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::IAM::Role","aws:cdk:cloudformation:props":{"assumeRolePolicyDocument":{"Statement":[{"Action":"sts:AssumeRole","Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"}}],"Version":"2012-10-17"},"managedPolicyArns":[{"Fn::Join":["",["arn:",{"Ref":"AWS::Partition"},":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]]}],"policies":[{"policyName":"LightsailPolicy","policyDocument":{"Statement":[{"Action":"lightsail:*","Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}}]}}}}},"LightsailHandler":{"id":"LightsailHandler","path":"SolanalysisLightsail-prod/LightsailHandler","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.Function","version":"2.212.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"SolanalysisLightsail-prod/LightsailHandler/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnFunction","version":"2.212.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Function","aws:cdk:cloudformation:props":{"code":{"zipFile":"\nimport boto3\nimport json\nimport time\nimport base64\n\ndef handler(event, context):\n    print(f\"Event: {json.dumps(event)}\")\n    \n    lightsail = boto3.client('lightsail', region_name='ap-southeast-1')  # Singapore region\n    \n    instance_name = event['ResourceProperties']['InstanceName']\n    blueprint_id = event['ResourceProperties']['BlueprintId']\n    bundle_id = event['ResourceProperties']['BundleId']\n    user_data = event['ResourceProperties']['UserData']\n    \n    try:\n        if event['RequestType'] == 'Create':\n            print(f\"Creating Lightsail instance: {instance_name}\")\n            \n            # Create Lightsail instance in Singapore\n            response = lightsail.create_instances(\n                instanceNames=[instance_name],\n                availabilityZone='ap-southeast-1a',  # Singapore AZ\n                blueprintId=blueprint_id,\n                bundleId=bundle_id,\n                userData=user_data\n            )\n            print(f\"Create response: {response}\")\n            \n            # Wait for instance to be running (with timeout)\n            max_attempts = 60  # 10 minutes\n            attempt = 0\n            \n            while attempt < max_attempts:\n                try:\n                    instance_response = lightsail.get_instance(instanceName=instance_name)\n                    state = instance_response['instance']['state']['name']\n                    print(f\"Instance state: {state} (attempt {attempt + 1})\")\n                    \n                    if state == 'running':\n                        break\n                    elif state in ['terminated', 'stopping', 'stopped']:\n                        raise Exception(f\"Instance failed to start, state: {state}\")\n                        \n                    time.sleep(10)\n                    attempt += 1\n                except Exception as e:\n                    if 'NotFoundException' in str(e):\n                        print(\"Instance not found yet, waiting...\")\n                        time.sleep(10)\n                        attempt += 1\n                        continue\n                    else:\n                        raise e\n            \n            if attempt >= max_attempts:\n                raise Exception(\"Timeout waiting for instance to become running\")\n            \n            # Get final instance info\n            instance = lightsail.get_instance(instanceName=instance_name)\n            public_ip = instance['instance'].get('publicIpAddress', 'pending')\n            private_ip = instance['instance'].get('privateIpAddress', 'pending')\n            \n            print(f\"Instance created successfully. Public IP: {public_ip}\")\n            \n            return {\n                'PhysicalResourceId': instance_name,\n                'Data': {\n                    'InstanceName': instance_name,\n                    'PublicIpAddress': public_ip,\n                    'PrivateIpAddress': private_ip\n                }\n            }\n            \n        elif event['RequestType'] == 'Delete':\n            print(f\"Deleting Lightsail instance: {instance_name}\")\n            try:\n                lightsail.delete_instance(instanceName=instance_name)\n                print(\"Instance deletion initiated\")\n            except Exception as e:\n                print(f\"Error deleting instance: {str(e)}\")\n                # Don't fail deletion if instance doesn't exist\n                \n            return {'PhysicalResourceId': instance_name}\n            \n        elif event['RequestType'] == 'Update':\n            print(\"Update requested - returning existing instance\")\n            # For updates, we'll return the existing instance info\n            try:\n                instance = lightsail.get_instance(instanceName=instance_name)\n                public_ip = instance['instance'].get('publicIpAddress', 'pending')\n                private_ip = instance['instance'].get('privateIpAddress', 'pending')\n                \n                return {\n                    'PhysicalResourceId': instance_name,\n                    'Data': {\n                        'InstanceName': instance_name,\n                        'PublicIpAddress': public_ip,\n                        'PrivateIpAddress': private_ip\n                    }\n                }\n            except Exception as e:\n                print(f\"Instance not found during update: {str(e)}\")\n                return {'PhysicalResourceId': instance_name}\n            \n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n        raise e\n"},"handler":"index.handler","role":{"Fn::GetAtt":["LightsailRoleFF1C82A3","Arn"]},"runtime":"python3.11","timeout":600}}}}},"LightsailProvider":{"id":"LightsailProvider","path":"SolanalysisLightsail-prod/LightsailProvider","constructInfo":{"fqn":"aws-cdk-lib.custom_resources.Provider","version":"2.212.0"},"children":{"framework-onEvent":{"id":"framework-onEvent","path":"SolanalysisLightsail-prod/LightsailProvider/framework-onEvent","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.Function","version":"2.212.0","metadata":[]},"children":{"ServiceRole":{"id":"ServiceRole","path":"SolanalysisLightsail-prod/LightsailProvider/framework-onEvent/ServiceRole","constructInfo":{"fqn":"aws-cdk-lib.aws_iam.Role","version":"2.212.0","metadata":[]},"children":{"ImportServiceRole":{"id":"ImportServiceRole","path":"SolanalysisLightsail-prod/LightsailProvider/framework-onEvent/ServiceRole/ImportServiceRole","constructInfo":{"fqn":"aws-cdk-lib.Resource","version":"2.212.0","metadata":[]}},"Resource":{"id":"Resource","path":"SolanalysisLightsail-prod/LightsailProvider/framework-onEvent/ServiceRole/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_iam.CfnRole","version":"2.212.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::IAM::Role","aws:cdk:cloudformation:props":{"assumeRolePolicyDocument":{"Statement":[{"Action":"sts:AssumeRole","Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"}}],"Version":"2012-10-17"},"managedPolicyArns":[{"Fn::Join":["",["arn:",{"Ref":"AWS::Partition"},":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]]}]}}},"DefaultPolicy":{"id":"DefaultPolicy","path":"SolanalysisLightsail-prod/LightsailProvider/framework-onEvent/ServiceRole/DefaultPolicy","constructInfo":{"fqn":"aws-cdk-lib.aws_iam.Policy","version":"2.212.0","metadata":[]},"children":{"Resource":{"id":"Resource","path":"SolanalysisLightsail-prod/LightsailProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_iam.CfnPolicy","version":"2.212.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::IAM::Policy","aws:cdk:cloudformation:props":{"policyDocument":{"Statement":[{"Action":"lambda:InvokeFunction","Effect":"Allow","Resource":[{"Fn::GetAtt":["LightsailHandlerB88DB77F","Arn"]},{"Fn::Join":["",[{"Fn::GetAtt":["LightsailHandlerB88DB77F","Arn"]},":*"]]}]},{"Action":"lambda:GetFunction","Effect":"Allow","Resource":{"Fn::GetAtt":["LightsailHandlerB88DB77F","Arn"]}}],"Version":"2012-10-17"},"policyName":"LightsailProviderframeworkonEventServiceRoleDefaultPolicy313B023A","roles":[{"Ref":"LightsailProviderframeworkonEventServiceRoleC3D0E1E6"}]}}}}}}},"Code":{"id":"Code","path":"SolanalysisLightsail-prod/LightsailProvider/framework-onEvent/Code","constructInfo":{"fqn":"aws-cdk-lib.aws_s3_assets.Asset","version":"2.212.0"},"children":{"Stage":{"id":"Stage","path":"SolanalysisLightsail-prod/LightsailProvider/framework-onEvent/Code/Stage","constructInfo":{"fqn":"aws-cdk-lib.AssetStaging","version":"2.212.0"}},"AssetBucket":{"id":"AssetBucket","path":"SolanalysisLightsail-prod/LightsailProvider/framework-onEvent/Code/AssetBucket","constructInfo":{"fqn":"aws-cdk-lib.aws_s3.BucketBase","version":"2.212.0","metadata":[]}}}},"Resource":{"id":"Resource","path":"SolanalysisLightsail-prod/LightsailProvider/framework-onEvent/Resource","constructInfo":{"fqn":"aws-cdk-lib.aws_lambda.CfnFunction","version":"2.212.0"},"attributes":{"aws:cdk:cloudformation:type":"AWS::Lambda::Function","aws:cdk:cloudformation:props":{"code":{"s3Bucket":"cdk-hnb659fds-assets-473359703960-ap-southeast-1","s3Key":"bdc104ed9cab1b5b6421713c8155f0b753380595356f710400609664d3635eca.zip"},"description":"AWS CDK resource provider framework - onEvent (SolanalysisLightsail-prod/LightsailProvider)","environment":{"variables":{"USER_ON_EVENT_FUNCTION_ARN":{"Fn::GetAtt":["LightsailHandlerB88DB77F","Arn"]}}},"handler":"framework.onEvent","loggingConfig":{"logFormat":"JSON","applicationLogLevel":"FATAL"},"role":{"Fn::GetAtt":["LightsailProviderframeworkonEventServiceRoleC3D0E1E6","Arn"]},"runtime":"nodejs22.x","timeout":900}}}}}}},"LightsailInstance":{"id":"LightsailInstance","path":"SolanalysisLightsail-prod/LightsailInstance","constructInfo":{"fqn":"aws-cdk-lib.CustomResource","version":"2.212.0","metadata":[]},"children":{"Default":{"id":"Default","path":"SolanalysisLightsail-prod/LightsailInstance/Default","constructInfo":{"fqn":"aws-cdk-lib.CfnResource","version":"2.212.0"}}}},"InstanceName":{"id":"InstanceName","path":"SolanalysisLightsail-prod/InstanceName","constructInfo":{"fqn":"aws-cdk-lib.CfnOutput","version":"2.212.0"}},"PublicIP":{"id":"PublicIP","path":"SolanalysisLightsail-prod/PublicIP","constructInfo":{"fqn":"aws-cdk-lib.CfnOutput","version":"2.212.0"}},"ApplicationURL":{"id":"ApplicationURL","path":"SolanalysisLightsail-prod/ApplicationURL","constructInfo":{"fqn":"aws-cdk-lib.CfnOutput","version":"2.212.0"}},"Region":{"id":"Region","path":"SolanalysisLightsail-prod/Region","constructInfo":{"fqn":"aws-cdk-lib.CfnOutput","version":"2.212.0"}},"MonthlyCost":{"id":"MonthlyCost","path":"SolanalysisLightsail-prod/MonthlyCost","constructInfo":{"fqn":"aws-cdk-lib.CfnOutput","version":"2.212.0"}},"SSHCommand":{"id":"SSHCommand","path":"SolanalysisLightsail-prod/SSHCommand","constructInfo":{"fqn":"aws-cdk-lib.CfnOutput","version":"2.212.0"}},"NextSteps":{"id":"NextSteps","path":"SolanalysisLightsail-prod/NextSteps","constructInfo":{"fqn":"aws-cdk-lib.CfnOutput","version":"2.212.0"}},"CDKMetadata":{"id":"CDKMetadata","path":"SolanalysisLightsail-prod/CDKMetadata","constructInfo":{"fqn":"constructs.Construct","version":"10.4.2"},"children":{"Default":{"id":"Default","path":"SolanalysisLightsail-prod/CDKMetadata/Default","constructInfo":{"fqn":"aws-cdk-lib.CfnResource","version":"2.212.0"}}}},"BootstrapVersion":{"id":"BootstrapVersion","path":"SolanalysisLightsail-prod/BootstrapVersion","constructInfo":{"fqn":"aws-cdk-lib.CfnParameter","version":"2.212.0"}},"CheckBootstrapVersion":{"id":"CheckBootstrapVersion","path":"SolanalysisLightsail-prod/CheckBootstrapVersion","constructInfo":{"fqn":"aws-cdk-lib.CfnRule","version":"2.212.0"}}}},"Tree":{"id":"Tree","path":"Tree","constructInfo":{"fqn":"constructs.Construct","version":"10.4.2"}}}}}